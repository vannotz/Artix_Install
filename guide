# login as root
user:root
passwd:artix

# load your keymap if needed, mine is br-abnt2 
loadkeys br-abnt2

# disable annoying beep
rmmod pcspkr

# rfkill may block wifi
rfkill unblock wifi

# your wifi card may be disabled
ip link set wlan0 up

# connect to wireless internet
connmanctl
	enable wifi
	scan wifi
	agent on
	# if this returns an error, reboot
	# list devices
	services
	# connect to your wifi device
	connect wifi_XXXXXXX
# ping to check connection
ping -c3 gnu.org

# check the install disk with lsblk, will be using /dev/sda
# partition disk with fdisk
fdisk /dev/sda
# make 2 partitions, nº1 512M (ESP) marked as "EFI System" type (1) and nº2 rest of the disk (CRYPT) with the default "Linux filesystem" type (20)
# the ESP partiton size can be as low as 256M if not on nvidia
# make the ESP partition 1G if you plan on using multiple different kernels

# format partitions (UEFI)
mkfs.fat -F32 /dev/sda1 <- ESP partition
fatlabel /dev/sda1 ESP
cryptsetup luksFormat /dev/sda2 <- CRYPT partition
cryptsetup luksOpen /dev/sda2 luks

# Create LVM
pvcreate /dev/mapper/luks
vgcreate vg0 /dev/mapper/luks
lvcreate --size xG vg0 --name swap
# x = the size of your swap partition, a value between 101% and 200% of your total ram size is recommended
lvcreate -l +100%FREE vg0 --name root
# I don't much care for creating a separate home partition
mkfs.ext4 -L ROOT /dev/mapper/vg0-root
mkswap -L SWAP /dev/mapper/vg0-swap

# mount partitions and turn on swap
# MOUNT ROOT BEFORE MOUNTING BOOT!
mount /dev/mapper/vg0-root /mnt
mkdir /mnt/boot
mount /dev/sda1 /mnt/boot
swapon /dev/mapper/vg0-swap

# basestrapping
basestrap /mnt base base-devel runit elogind-runit linux-zen linux-zen-headers linux-firmware networkmanager-runit efibootmgr lvm2 cryptsetup intel-ucode vim
# linux-zen-headers only necessary if on nvidia
# intel-ucode if on intel, amd-ucode if on amd
# networkmanager is needed for wireless network, you can only install dhcpcd-runit if you just use ethernet
# you can change networkmanager-runit for something like iwd-runit if you are more familiar with it, I recommend networkmanager

## Post-Basestrap 
# generate fstab
fstabgen -U /mnt >> /mnt/etc/fstab

# chroot into system
artix-chroot /mnt bash

# configure clock
ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
hwclock --systohc

# choose and set locale
# uncomment desired locale, usually en_US.UTF-8
vim /etc/locale.gen
# generate locale 
locale-gen
# set locale systemwide
vim /etc/locale.conf
	export LANG="en_US.UTF-8"
	export LC_COLLATE="C"

# add user and add to wheel group
# $USER = your user
useradd -mG wheel $USER

# configure wheel group
EDITOR=vim visudo
# uncomment %wheel ALL=(ALL:ALL) ALL

# configure passwords
passwd
passwd $USER

# network config
# will be using 'artix' as the hostname, change to your liking
vim /etc/hostname
	artix
vim /etc/hosts
	127.0.0.1	localhost
	::1             localhost
 	127.0.1.1       artix.localdomain artix
	0.0.0.0         0.0.0.0
# you may remove the "::1" line if you disable ipv6
ln -s /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default
# here you may change "NetworkManager" for your client of choice, i.e dhcpcd, iwd etc

# modify mkinitcpio for encryption support
vim /etc/mkinitcpio.conf
# add ext4 to MODULES=()
# if on nvidia, add nvidia nvidia_modeset nvidia_uvm nvidia_drm after ext4
# add encrypt lvm2 to HOOKS=() before filesystems
# if you are on nvidia you can remove kms from HOOKS=(), unless it's a nvidia dGPU and you also have an intel iGPU
# uncomment COMPRESSION="lz4" for a slightly faster boot time in exchange for a slightly bigger initial ramdisk
# generate initial ramdisk
mkinitcpio -P

# create efistub
efibootmgr -d /dev/sda -p 1 -c -L Artix -l /vmlinuz-linux-zen -u 'cryptdevice=/dev/sda2:luks:allow-discards root=/dev/mapper/vg0-root resume=/dev/mapper/vg0-swap rw initrd=\intel-ucode.img initrd=\initramfs-linux-zen.img' -v
# resume = SWAP
# -p 1 = ESP partition number (if /mnt/boot is the mount point for /dev/sda1, then -p 1, if the moint point for /dev/sda2, then -p 2 ...)
# i recommend eventually switching from pointing efibootmgr with the partition scheme to using each partition's UUIDs, run blkid to get them
# if you do the above, the efistub would look something like this, mind the "=UUID=" between the partition and it's UUID
(...) 'cryptdevice=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx:luks:allow-discards root=UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (...)
# add desired kernel parameters after rw, separate with spaces ( mitigations=off nowatchdog quiet ...)
# my kernel parameters, for reference
rw quiet rootfstype=ext4 nouveau.modeset=0 nvidia-drm.modeset=1 i915.modeset=1 mitigations=off zswap.compressor=lz4 sysctl.vm.swappiness=10 sysctl.vm.max_map_count=2147483642 nowatchdog intel_iommu=on iommu=pt ipv6.disable=1 module_blacklist=nouveau,pcspkr,iTCO_wdt,bluetooth,btusb
# blacklisting nouveau in the kernel parameters "module_blacklist=nouveau" is recommended if you eventually install the proprietary nvidia drivers
# blacklisting pcspkr in the kernel paramaters "module_blacklist=pcspkr" will remove any annoying beeps
# initrd=\*-ucode for specific cpu (amd or intel)
# -zen because of the zen kernel

# install the nvidia-dkms kernel if needed
pacman -S nvidia-dkms

## Personal Post-Install Basic Needs
# install packages needed to build suckless software and start an xorg server
pacman -S git libx11 libxft libxinerama xorg-server xorg-xinit freetype2
# xorg-xinit will give startx, after you've enabled the Arch repos you can instead install sx and remove xorg-xinit if you so desire

# configure keyboard layout for the tty
vim /etc/vconsole.conf
	KEYMAP=br-abnt2
# configure keyboard layout for xorg
vim /etc/X11/xorg.conf.d/00-keyboard.conf
	Section "InputClass"
		Identifier "keyboard layout"
		MatchIsKeyboard "yes"
		Option "XkbLayout" "br"
		Option "XkbVariant" "abnt2"
	EndSection

# load legacy oss modules (needed for slstatus' vol_perc)
vim /etc/modules-load.d/modules.conf
	snd_mixer_oss
# enable performance support for intel graphics (Sandy Bridge and onwards)
vim /usr/lib/sysctl.d/60-mdapi.conf
	dev.i915.perf_stream_paranoid=0

# extra modules for intel's (i)GPUs
vim /etc/mkinitcpio.conf
# add intel_agp i915 to MODULES=() at the end
mkinitcpio -P

# disable access time update and increase commit interval
vim /etc/fstab
# replace realatime with noatime and change commit=x to 10, this will reduce writes to the disk

# configuring modules (disabling bluetooth and nvidia configs)
vim /etc/modprobe.d/modprobe.conf
	alias net-pf-31 off
	alias net-pf-10 off
	alias nouveau off
	softdep nvidia post: nvidia-uvm
	options nvidia NVreg_UsePageAttributeTable=1 NVreg_RegistryDwords="OverrideMaxPerf=0x1" NVreg_EnableStreamMemOPs=1

# unmount everything before rebooting (it's good pratice)
exit
umount -R /mnt
swapoff -a
poweroff
# remove the USB stick or change the boot order on the BIOS before booting again
